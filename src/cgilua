#!/usr/bin/lua
local lfs = require"lfs"
local server = require"cgilua_cli.server"
local templates = require"cgilua_cli.templates"
-- local args = require"cgilua_cli.args"

local read_template = function(path)
   local tmpl = templates[path]
   assert(tmpl, "NÃ£o achei template:".. path)
   return tmpl
end

local function subs (s, t)
	return (s:gsub ("%$%$([_%w]+)%$%$", t))
end

local function exec(cmd)
  print(cmd)
  os.execute(cmd)
end

local function write(file_name, content)
  assert(content ~= nil, "No content for " .. file_name)
    local fh, err  = assert(io.open(file_name, "w"))
    fh:write(content)
end

local arg = {
  new = arg[1] == "new" and arg[2],
  start = arg[1] == "start" and (arg[2] or 8000),
}

if not arg.new and not arg.start then
  print[[
Usage: cgilua COMMAND

  new       Create new cgilua project with the specified name. 
  start     Start dummy HTTP server on the specified port. Default: 8000]]
end

if arg.new then
  local prj = arg.new
    local paths = {
    	"/src",
    	"/src/modules",
    	"/src/cgi-bin",
    	"/src/cgi-bin/cgilua",
    	{ "/src/cgi-bin/index.lua", read_template"index.lua" },
    	{ "/src/cgi-bin/cgilua/config.lua", read_template"config.lua" },
    	{ "/" .. prj .. "-0.1-0.rockspec", read_template"rockspec.lua", { PROJECT_NAME = prj } },
    }
    lfs.mkdir(prj)
    for _, path in ipairs(paths) do
      if type(path) == "table" then
        local content = path[2]
        local sub = path[3]
        local path = path[1]
        if sub then
          content = subs(content, sub)
        end
        write(prj .. path, content)
      else
        lfs.mkdir(prj .. path)
      end
    end
elseif arg.start then
  print"\27[31mThis is a server for DEVELOPMENT purposes only. Do NOT use this in production.\27[0m"
  server.start(arg.start or 8000)
end



