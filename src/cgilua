#!/usr/bin/lua
local lfs = require"lfs"

local socket = require"socket"
local templates = require"cgilua_cli.templates"

function find_open_port(except)
    local min_port = 49152
    local max_port = 65535
    local port

    while true do
        port = math.random(min_port, max_port)
        local server = socket.tcp()
        local result, err = server:bind("*", port)

        if result and port ~= except then
        -- if result then
            server:close()
            return port
        end
    end
end

local read_template = function(path)
   local tmpl = templates[path]
   assert(tmpl, "NÃ£o achei template:".. path)
   return tmpl
end

local function subs (s, t)
	return (s:gsub ("%$%$([_%w]+)%$%$", t))
end

local function install(prj, rock, extra)
  -- local cmd = (path and ("cd ".. path .. " && ") or "") .. "luarocks install " .. rock .." --tree=luarocks --lua-version=5.3" .. " " .. (extra and table.concat(extra, " ") or "")
  -- loca
  -- local fh = assert(io.popen(cmd))
  -- print(fh:read("*a"))
  -- os.execute("sudo docker exec -u app " .. prj .. " luarocks install " .. rock .. " " .. (extra or "") .. " --local")
end

local function exec(cmd)
  print(cmd)
  os.execute(cmd)
end

local cmds = {}
local order = {}


local function command(cmd, f)
  cmds[cmd] = f
  table.insert(order, cmd)
end


local function write(file_name, content)
  assert(content ~= nil, "No content for " .. file_name)
    local fh, err  = assert(io.open(file_name, "w"))
    fh:write(content)
end

command("new", function(args)
    local prj = args[2]
    local docker_compose = subs(read_template("docker-compose.yml"), {
    			PROJECT_NAME = prj,
    			CWD = lfs.currentdir() .. "/" .. prj,
    })
    local http = find_open_port()
    local ssh = find_open_port(http)
    local paths = {
    	"/logs",
    	"/src",
    	"/src/migrations",
    	"/src/controller",
    	"/src/controller/cgilua",
    	"/src/shell",
    	"/src/modules",
    	"/backup",
    	-- { "/src/modules/db_connection.lua", read_template("db_connection.lua") },
    	{ "/src/controller/main.lua", read_template("main.lua") },
    	{ "/src/controller/cgilua/config.lua", read_template("config.lua") },
    	{ "/dev.lua", read_template"dev.lua", {HTTP_PORT = http, PROJECT_NAME = prj} },
    	{
    		"/docker-compose.yml",
    		read_template("docker-compose.yml"),
    		{
    			PROJECT_NAME = prj,
    			CWD = lfs.currentdir() .. "/" .. prj,
    			HTTP_PORT = http,
    			SSH_PORT = ssh
    		},
    	},
    	{ "/" .. prj .. "-0.1-0.rockspec", read_template"rockspec.lua", { PROJECT_NAME = prj } },
    	{ "/Dockerfile", read_template("Dockerfile"), { PROJECT_NAME = prj } },
    	{ "/cgilua.conf", read_template("cgilua.conf") },
    }
    lfs.mkdir(prj)
    for _, path in ipairs(paths) do
      if type(path) == "table" then
        local content = path[2]
        local sub = path[3]
        local path = path[1]
        if sub then
          content = subs(content, sub)
        end
        write(prj .. path, content)
      else
        lfs.mkdir(prj .. path)
      end
    end
    exec("chmod a+x " .. prj .. "/src/controller/main.lua")
end)


-- command("shell", function(args)
--   local t = dofile("dev.lua")
--   exec(subs("ssh -p $$SSH_PORT$$ app@localhost", {SSH_PORT = t.ssh}))
-- end)

-- command("db", function(args)
--   local t = dofile("dev.lua")
--   exec(subs("ssh -p $$SSH_PORT$$ app@localhost -t 'cd $$DB_FOLDER$$ && db'", {SSH_PORT = t.ssh, DB_FOLDER = t.db_folder}))
-- end)

command("up",
function(args)
  exec("sudo docker compose up -d")
end)

command("build",
function(args)
  local t = dofile("dev.lua")

  exec("sudo docker build -t " .. t.project_name .. ":latest .")
end)

command("install", function(args)
  local t = dofile("dev.lua")
  install(t.project_name, args[2])
end)

-- command("add", function(args)
--   write("src/controller/"..args[2], base)
--   exec("chmod a+x src/controller/"..args[2])
-- end
-- )

local cmd = cmds[arg[1]]

if cmd then
  cmd(arg)
else
  print("Invalid argument, received: " .. table.concat(arg," ") .. "\n"..
    "Expected: one of the following: \n  " .. table.concat(order, "\n  ")
  )
end

